# -*- coding: utf-8 -*-
"""Analisis_Calidad_Aire_Madrid_sintentico.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1J5LXowSi67iSDOyk57q8d961d9xd4NzO

# 1.0 Calidad de Aire. Datos Horarios.
"""


import os
import numpy as np 
import pandas as pd 
import glob
import json
from shapely.geometry import shape, Point
import sys
import math
from hdfs3 import HDFileSystem



frame = pd.DataFrame()
list_ = []

stationsPath=sys.argv[1]
distritosNO2Path=sys.argv[2]
distritosM25Path=sys.argv[3]
path =sys.argv[4] 
barriosPath=sys.argv[5]

hdfs = HDFileSystem(host='bdhKC', port=9000)

print("path:" + path)
print("stationsPath:" + stationsPath)
print("distritosNO2Path:" + distritosNO2Path)
print("distritosM25Path:" + distritosM25Path)
print("barriosPath:" + barriosPath)

with hdfs.open(path + "/Anio201*/*.csv") as f:
    allFiles = glob.glob(f)
    for file_ in allFiles:
        print(file_)
        df = pd.read_csv(file_,index_col=None, header=0, sep=';')
        list_.append(df)
frame = pd.concat(list_)

frame = frame.sort_values(['ESTACION', 'MAGNITUD'])

# monto la cadena la estacion
frame['estacion_id']=(frame['PROVINCIA'].astype(str).str.zfill(2) + frame['MUNICIPIO'].astype(str).str.zfill(3) + frame['ESTACION'].astype(str).str.zfill(3)).astype(int)

# monto la fecha
frame['fecha']=pd.to_datetime(frame['ANO']*10000+frame['MES']*100+frame['DIA'], format='%Y%m%d')

frame2 = pd.melt(frame, id_vars=['PROVINCIA', 'MUNICIPIO','ESTACION', 'MAGNITUD','PUNTO_MUESTREO','ANO', 'MES','DIA','estacion_id', 'fecha'], var_name="hora", value_name='value')
frame2 = frame2[frame2['ANO']==2017][~frame2.value.isin(['N','V'])]
frame2.reset_index(drop=True)
frame2['value']=frame2['value'].astype(str).astype(float)

## Contaminantes NO2 y PM2.5

# NO2 => 12 Magnitud
# Particulas 2.5micrometros => 09

def percentile(n):
    def percentile_(x):
        return np.percentile(x, n)
    percentile_.__name__ = 'percentile_%s' % n
    return percentile_

# Dioxido de Nitrogeno
data_NO2=frame2[frame2['MAGNITUD']==12]
data_NO2=data_NO2.groupby('estacion_id')['value'].agg([pd.np.min, pd.np.max, pd.np.mean, percentile(5), pd.np.median, percentile(95)])
data_NO2.reset_index(drop=True)

# particulas micro2.5
data_m25=frame2[frame2['MAGNITUD']==9]
data_m25=data_m25.groupby('estacion_id')['value'].agg([pd.np.min, pd.np.max, pd.np.mean, percentile(5), pd.np.median, percentile(95)])
data_m25.reset_index(drop=True)

# Stations
stations = pd.read_csv(stationsPath)

with open(barriosPath) as f:
    js = json.load(f)
## Contaminantes NO2 y PM2.5

# NO2 => 12 Magnitud
# Particulas 2.5micrometros => 09

# Dioxido de Nitrogeno,
# Cruzamos con las estaciones
data_NO2 = frame2[frame2['MAGNITUD']==12]
data_NO2 = data_NO2.groupby('estacion_id')['value'].agg([pd.np.min, pd.np.max, pd.np.mean, percentile(5), pd.np.median, percentile(95)])
# sacamos estacion_id del indice
data_NO2 = data_NO2.reset_index()
data_NO2 = data_NO2.join(stations.set_index('id'), on='estacion_id')


# Dioxido de Nitrogeno,
# Cruzamos con las estaciones
data_m25 = frame2[frame2['MAGNITUD']==9]
data_m25 = data_m25.groupby('estacion_id')['value'].agg([pd.np.min, pd.np.max, pd.np.mean, percentile(5), pd.np.median, percentile(95)])
data_m25 = data_m25.reset_index()
data_m25 = data_m25.join(stations.set_index('id'), on='estacion_id')


data_estacion = data_NO2[['lat','lon','amin','amax','mean', 'percentile_5', 'median','percentile_95']]
"""
Para cada barrio, calculo la distancia a cada una de las estaciones
"""
with open(distritosNO2Path, 'w') as f:
  f.write('"CODBAR","BARRIO","CODDIST","DISTRITO","MEAN","PERC5","MEDIA","PERC95"\n')
  for barrio in js['features']:
      
      # mean
      mean_proximo = 10000
      mean_sintetico = 0
      # percentile_5
      per5_proximo = 10000
      per5_sintetico = 0
      # median
      median_proximo = 10000
      median_sintetico = 0
      # percentile_95
      per95_proximo = 10000
      per95_sintentico = 0
      
      polygon = shape(barrio['geometry'])
      centroide = polygon.centroid.wkt
      # print(centroide)
      for index, medida in data_estacion.iterrows():
          point = Point(medida['lon'], medida['lat'])
          distance = polygon.exterior.distance(point)
          radio = .068
          
          #mean
          if mean_proximo > distance: 
              mean_proximo = distance
              mean_sintetico = medida['mean'] * math.exp( - math.pow(distance,2)/math.pow((2*radio),2))
              
          #per5
          if per5_proximo > distance: 
              per5_proximo = distance
              per5_sintetico = medida['percentile_5'] * math.exp( - math.pow(distance,2)/math.pow((2*radio),2))
              
          #median
          if median_proximo > distance: 
              median_proximo = distance
              median_sintetico = medida['median'] * math.exp( - math.pow(distance,2)/math.pow((2*radio),2))
          
          #per95
          if per95_proximo > distance: 
              per95_proximo = distance
              per95_sintentico = medida['percentile_95'] * math.exp( - math.pow(distance,2)/math.pow((2*radio),2))
              
      f.write('"{}","{}","{}","{}","{}","{}","{}","{}"\n'.format(barrio['properties']['CODBAR'],barrio['properties']['NOMBRE'],barrio['properties']['CODDISTRIT'],barrio['properties']['NOMDIS'], mean_sintetico, per5_sintetico, median_sintetico, per95_sintentico))



data_estacion = data_m25[['lat','lon','amin','amax','mean', 'percentile_5', 'median','percentile_95']]
"""
Para cada barrio, calculo la distancia a cada una de las estaciones
"""
with hdfs.open(distritosM25Path, 'wb') as f:
  f.write('"CODBAR","BARRIO","CODDIST","DISTRITO","MEAN","PERC5","MEDIA","PERC95"\n')
  for barrio in js['features']:
      
      # mean
      mean_proximo = 10000
      mean_sintetico = 0
      # percentile_5
      per5_proximo = 10000
      per5_sintetico = 0
      # median
      median_proximo = 10000
      median_sintetico = 0
      # percentile_95
      per95_proximo = 10000
      per95_sintentico = 0
      
      polygon = shape(barrio['geometry'])
      centroide = polygon.centroid.wkt
      # print(centroide)
      for index, medida in data_estacion.iterrows():
          point = Point(medida['lon'], medida['lat'])
          distance = polygon.exterior.distance(point)
          radio = .068
          
          #mean
          if mean_proximo > distance: 
              mean_proximo = distance
              mean_sintetico = medida['mean'] * math.exp( - math.pow(distance,2)/math.pow((2*radio),2))
              
          #per5
          if per5_proximo > distance: 
              per5_proximo = distance
              per5_sintetico = medida['percentile_5'] * math.exp( - math.pow(distance,2)/math.pow((2*radio),2))
              
          #median
          if median_proximo > distance: 
              median_proximo = distance
              median_sintetico = medida['median'] * math.exp( - math.pow(distance,2)/math.pow((2*radio),2))
          
          #per95
          if per95_proximo > distance: 
              per95_proximo = distance
              per95_sintentico = medida['percentile_95'] * math.exp( - math.pow(distance,2)/math.pow((2*radio),2))
              
      f.write('"{}","{}","{}","{}","{}","{}","{}","{}"\n'.format(barrio['properties']['CODBAR'],barrio['properties']['NOMBRE'],barrio['properties']['CODDISTRIT'], barrio['properties']['NOMDIS'], mean_sintetico, per5_sintetico, median_sintetico, per95_sintentico))


